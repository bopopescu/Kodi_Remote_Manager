
import base64, codecs
thecrew = 'IyAgIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKIyAgIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMKIyAgIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlcgojICAgdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiMKIyAgIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAojICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUgR05VCiMgICBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgojCiMgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljCiMgICBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZQojICAgICAgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuLAojICAgICAgNTkgVGVtcGxlIFBsYWNlLCBTdWl0ZSAzMzAsCiMgICAgICBCb3N0b24sIE1BICAwMjExMS0xMzA3ICBVU0EKCiMgVGhpcyBmaWxlIGlzIHBhcnQgb2YgdXJsZ3JhYmJlciwgYSBoaWdoLWxldmVsIGNyb3NzLXByb3RvY29sIHVybC1ncmFiYmVyCiMgQ29weXJpZ2h0IDIwMDItMjAwNCBNaWNoYWVsIEQuIFN0ZW5uZXIsIFJ5YW4gVG9tYXlrbwoKIyBNb2RpZmllZCBieSBCZW5vaXQgQm9pc3Npbm90OgojICAtIGZpeCBmb3IgZGlnZXN0IGF1dGggKGluc3BpcmVkIGZyb20gdXJsbGliMi5weSBAIFB5dGhvbiB2Mi40KQojIE1vZGlmaWVkIGJ5IERpcmtqYW4gT2NodG1hbjoKIyAgLSBpbXBvcnQgbWQ1IGZ1bmN0aW9uIGZyb20gYSBsb2NhbCB1dGlsIG1vZHVsZQoKIiIiQW4gSFRUUCBoYW5kbGVyIGZvciB1cmxsaWIyIHRoYXQgc3VwcG9ydHMgSFRUUCAxLjEgYW5kIGtlZXBhbGl2ZS4KCj4+PiBpbXBvcnQgdXJsbGliMgo+Pj4gZnJvbSBrZWVwYWxpdmUgaW1wb3J0IEhUVFBIYW5kbGVyCj4+PiBrZWVwYWxpdmVfaGFuZGxlciA9IEhUVFBIYW5kbGVyKCkKPj4+IG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKGtlZXBhbGl2ZV9oYW5kbGVyKQo+Pj4gdXJsbGliMi5pbnN0YWxsX29wZW5lcihvcGVuZXIpCj4+Pgo+Pj4gZm8gPSB1cmxsaWIyLnVybG9wZW4oJ2h0dHA6Ly93d3cucHl0aG9uLm9yZycpCgpJZiBhIGNvbm5lY3Rpb24gdG8gYSBnaXZlbiBob3N0IGlzIHJlcXVlc3RlZCwgYW5kIGFsbCBvZiB0aGUgZXhpc3RpbmcKY29ubmVjdGlvbnMgYXJlIHN0aWxsIGluIHVzZSwgYW5vdGhlciBjb25uZWN0aW9uIHdpbGwgYmUgb3BlbmVkLiAgSWYKdGhlIGhhbmRsZXIgdHJpZXMgdG8gdXNlIGFuIGV4aXN0aW5nIGNvbm5lY3Rpb24gYnV0IGl0IGZhaWxzIGluIHNvbWUKd2F5LCBpdCB3aWxsIGJlIGNsb3NlZCBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBwb29sLgoKVG8gcmVtb3ZlIHRoZSBoYW5kbGVyLCBzaW1wbHkgcmUtcnVuIGJ1aWxkX29wZW5lciB3aXRoIG5vIGFyZ3VtZW50cywgYW5kCmluc3RhbGwgdGhhdCBvcGVuZXIuCgpZb3UgY2FuIGV4cGxpY2l0bHkgY2xvc2UgY29ubmVjdGlvbnMgYnkgdXNpbmcgdGhlIGNsb3NlX2Nvbm5lY3Rpb24oKQptZXRob2Qgb2YgdGhlIHJldHVybmVkIGZpbGUtbGlrZSBvYmplY3QgKGRlc2NyaWJlZCBiZWxvdykgb3IgeW91IGNhbgp1c2UgdGhlIGhhbmRsZXIgbWV0aG9kczoKCiAgY2xvc2VfY29ubmVjdGlvbihob3N0KQogIGNsb3NlX2FsbCgpCiAgb3Blbl9jb25uZWN0aW9ucygpCgpOT1RFOiB1c2luZyB0aGUgY2xvc2VfY29ubmVjdGlvbiBhbmQgY2xvc2VfYWxsIG1ldGhvZHMgb2YgdGhlIGhhbmRsZXIKc2hvdWxkIGJlIGRvbmUgd2l0aCBjYXJlIHdoZW4gdXNpbmcgbXVsdGlwbGUgdGhyZWFkcy4KICAqIHRoZXJlIGlzIG5vdGhpbmcgdGhhdCBwcmV2ZW50cyBhbm90aGVyIHRocmVhZCBmcm9tIGNyZWF0aW5nIG5ldwogICAgY29ubmVjdGlvbnMgaW1tZWRpYXRlbHkgYWZ0ZXIgY29ubmVjdGlvbnMgYXJlIGNsb3NlZAogICogbm8gY2hlY2tzIGFyZSBkb25lIHRvIHByZXZlbnQgaW4tdXNlIGNvbm5lY3Rpb25zIGZyb20gYmVpbmcgY2xvc2VkCgo+Pj4ga2VlcGFsaXZlX2hhbmRsZXIuY2xvc2VfYWxsKCkKCkVYVFJBIEFUVFJJQlVURVMgQU5EIE1FVEhPRFMKCiAgVXBvbiBhIHN0YXR1cyBvZiAyMDAsIHRoZSBvYmplY3QgcmV0dXJuZWQgaGFzIGEgZmV3IGFkZGl0aW9uYWwKICBhdHRyaWJ1dGVzIGFuZCBtZXRob2RzLCB3aGljaCBzaG91bGQgbm90IGJlIHVzZWQgaWYgeW91IHdhbnQgdG8KICByZW1haW4gY29uc2lzdGVudCB3aXRoIHRoZSBub3JtYWwgdXJsbGliMi1yZXR1cm5lZCBvYmplY3RzOgoKICAgIGNsb3NlX2Nvbm5lY3Rpb24oKSAgLSAgY2xvc2UgdGhlIGNvbm5lY3Rpb24gdG8gdGhlIGhvc3QKICAgIHJlYWRsaW5lcygpICAgICAgICAgLSAgeW91IGtub3csIHJlYWRsaW5lcygpCiAgICBzdGF0dXMgICAgICAgICAgICAgIC0gIHRoZSByZXR1cm4gc3RhdHVzIChpZSA0MDQpCiAgICByZWFzb24gICAgICAgICAgICAgIC0gIGVuZ2xpc2ggdHJhbnNsYXRpb24gb2Ygc3RhdHVzIChpZSAnRmlsZSBub3QgZm91bmQnKQoKICBJZiB5b3Ugd2FudCB0aGUgYmVzdCBvZiBib3RoIHdvcmxkcywgdXNlIHRoaXMgaW5zaWRlIGFuCiAgQXR0cmlidXRlRXJyb3ItY2F0Y2hpbmcgdHJ5OgoKICA+Pj4gdHJ5OiBzdGF0dXMgPSBmby5zdGF0dXMKICA+Pj4gZXhjZXB0IEF0dHJpYnV0ZUVycm9yOiBzdGF0dXMgPSBOb25lCgogIFVuZm9ydHVuYXRlbHksIHRoZXNlIGFyZSBPTkxZIHRoZXJlIGlmIHN0YXR1cyA9PSAyMDAsIHNvIGl0J3Mgbm90CiAgZWFzeSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIG5vbi0yMDAgcmVzcG9uc2VzLiAgVGhlIHJlYXNvbiBpcyB0aGF0CiAgdXJsbGliMiB0cmllcyB0byBkbyBjbGV2ZXIgdGhpbmdzIHdpdGggZXJyb3IgY29kZXMgMzAxLCAzMDIsIDQwMSwKICBhbmQgNDA3LCBhbmQgaXQgd3JhcHMgdGhlIG9iamVjdCB1cG9uIHJldHVybi4KCiAgRm9yIHB5dGhvbiB2ZXJzaW9ucyBlYXJsaWVyIHRoYW4gMi40LCB5b3UgY2FuIGF2b2lkIHRoaXMgZmFuY3kgZXJyb3IKICBoYW5kbGluZyBieSBzZXR0aW5nIHRoZSBtb2R1bGUtbGV2ZWwgZ2xvYmFsIEhBTkRMRV9FUlJPUlMgdG8gemVyby4KICBZb3Ugc2VlLCBwcmlvciB0byAyLjQsIGl0J3MgdGhlIEhUVFAgSGFuZGxlcidzIGpvYiB0byBkZXRlcm1pbmUgd2hhdAogIHRvIGhhbmRsZSBzcGVjaWFsbHksIGFuZCB3aGF0IHRvIGp1c3QgcGFzcyB1cC4gIEhBTkRMRV9FUlJPUlMgPT0gMAogIG1lYW5zICJwYXNzIGV2ZXJ5dGhpbmcgdXAiLiAgSW4gcHl0aG9uIDIuNCwgaG93ZXZlciwgdGhpcyBqb2Igbm8KICBsb25nZXIgYmVsb25ncyB0byB0aGUgSFRUUCBIYW5kbGVyIGFuZCBpcyBub3cgZG9uZSBieSBhIE5FVyBoYW5kbGVyLAogIEhUVFBFcnJvclByb2Nlc3Nvci4gIEhlcmUncyB0aGUgYm90dG9tIGxpbmU6CgogICAgcHl0aG9uIHZlcnNpb24gPCAyLjQKICAgICAgICBIQU5ETEVfRVJST1JTID09IDEgIChkZWZhdWx0KSBwYXNzIHVwIDIwMCwgdHJlYXQgdGhlIHJlc3QgYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycwogICAgICAgIEhBTkRMRV9FUlJPUlMgPT0gMCAgcGFzcyBldmVyeXRoaW5nIHVwLCBlcnJvciBwcm9jZXNzaW5nIGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0IHRvIHRoZSBjYWxsaW5nIGNvZGUKICAgIHB5dGhvbiB2ZXJzaW9uID49IDIuNAogICAgICAgIEhBTkRMRV9FUlJPUlMgPT0gMSAgcGFzcyB1cCAyMDAsIHRyZWF0IHRoZSByZXN0IGFzIGVycm9ycwogICAgICAgIEhBTkRMRV9FUlJPUlMgPT0gMCAgKGRlZmF1bHQpIHBhc3MgZXZlcnl0aGluZyB1cCwgbGV0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgaGFuZGxlcnMgKHNwZWNpZmljYWxseSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhUVFBFcnJvclByb2Nlc3NvcikgZGVjaWRlIHdoYXQgdG8gZG8KCiAgSW4gcHJhY3RpY2UsIHNldHRpbmcgdGhlIHZhcmlhYmxlIGVpdGhlciB3YXkgbWFrZXMgbGl0dGxlIGRpZmZlcmVuY2UKICBpbiBweXRob24gMi40LCBzbyBmb3IgdGhlIG1vc3QgY29uc2lzdGVudCBiZWhhdmlvciBhY3Jvc3MgdmVyc2lvbnMsCiAgeW91IHByb2JhYmx5IGp1c3Qgd2FudCB0byB1c2UgdGhlIGRlZmF1bHRzLCB3aGljaCB3aWxsIGdpdmUgeW91CiAgZXhjZXB0aW9ucyBvbiBlcnJvcnMuCgoiIiIKCiMgJElkOiBrZWVwYWxpdmUucHksdiAxLjE0IDIwMDYvMDQvMDQgMjE6MDA6MzIgbXN0ZW5uZXIgRXhwICQKCmltcG9ydCB1cmxsaWIyCmltcG9ydCBodHRwbGliCmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZAoKREVCVUcgPSBOb25lCgppbXBvcnQgc3lzCmlmIHN5cy52ZXJzaW9uX2luZm8gPCAoMiwgNCk6IEhBTkRMRV9FUlJPUlMgPSAxCmVsc2U6IEhBTkRMRV9FUlJPUlMgPSAwCgpjbGFzcyBDb25uZWN0aW9uTWFuYWdlcjoKICAgICIiIgogICAgVGhlIGNvbm5lY3Rpb24gbWFuYWdlciBtdXN0IGJlIGFibGUgdG86CiAgICAgICoga2VlcCB0cmFjayBvZiBhbGwgZXhpc3RpbmcKICAgICAgIiIiCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5fbG9jayA9IHRocmVhZC5hbGxvY2F0ZV9sb2NrKCkKICAgICAgICBzZWxmLl9ob3N0bWFwID0ge30gIyBtYXAgaG9zdHMgdG8gYSBsaXN0IG9mIGNvbm5lY3Rpb25zCiAgICAgICAgc2VsZi5fY29ubm1hcCA9IHt9ICMgbWFwIGNvbm5lY3Rpb25zIHRvIGhvc3QKICAgICAgICBzZWxmLl9y'
doesnt = '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VUWyqUIlovOlPvNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPNtpzI0qKWhVUAyoTLhpTSlMJ50YzIlpz9lXPqbqUEjWljtpzIkYPOlYNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpv5mqTS0qKZfVUVhoKAaYPOlYzuyLJEypaZcPtbtVPNtMTIzVS9lMKImMI9wo25hMJA0nJ9hXUAyoTLfVTtfVUWypFjtnT9mqPx6PvNtVPNtVPNtVvVvp3EupaDtqTuyVUElLJ5mLJA0nJ9hVUqcqTttLFOlMF11p2IxVTAioz5yL3Eco24XVPNtVPNtVPOlMKE1pz4tLFOlMKAjo25mMFOiLzcyL3DtXUVcVUIjo24tp3IwL2ImplOipvOBo25yVT9hVTMunJk1pzHhPvNtVPNtVPNtITucplORG0IGVT5iqPOwoT9mMFOipvOlMJ1iqzHtLzSxVTAioz5yL3Eco25mVTyhVTAup2ImVUqbMKWyPvNtVPNtVPNtnKDtpzI0qKWhpl4tVRuiq2I2MKVfVTyzVTShVUIhMKujMJA0MJDtMKuwMKO0nJ9hVT9wL3IlpljtnKDXVPNtVPNtVPO3nJkfVTAfo3AyVTShMPOl'
do = 'ZW1vdmUgdGhlIGNvbm5lY3Rpb24gYmVmb3JlIHJlLXJhaXNpbmcuCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLl9zdGFydF90cmFuc2FjdGlvbihoLCByZXEpCiAgICAgICAgICAgIHIgPSBoLmdldHJlc3BvbnNlKCkKICAgICAgICAgICAgIyBub3RlOiBqdXN0IGJlY2F1c2Ugd2UgZ290IHNvbWV0aGluZyBiYWNrIGRvZXNuJ3QgbWVhbiBpdAogICAgICAgICAgICAjIHdvcmtlZC4gIFdlJ2xsIGNoZWNrIHRoZSB2ZXJzaW9uIGJlbG93LCB0b28uCiAgICAgICAgZXhjZXB0IChzb2NrZXQuZXJyb3IsIGh0dHBsaWIuSFRUUEV4Y2VwdGlvbik6CiAgICAgICAgICAgIHIgPSBOb25lCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAjIGFkZGluZyB0aGlzIGJsb2NrIGp1c3QgaW4gY2FzZSB3ZSd2ZSBtaXNzZWQKICAgICAgICAgICAgIyBzb21ldGhpbmcgd2Ugd2lsbCBzdGlsbCByYWlzZSB0aGUgZXhjZXB0aW9uLCBidXQKICAgICAgICAgICAgIyBsZXRzIHRyeSBhbmQgY2xvc2UgdGhlIGNvbm5lY3Rpb24gYW5kIHJlbW92ZSBpdAogICAgICAgICAgICAjIGZpcnN0LiAgV2UgcHJldmlvdXNseSBnb3QgaW50byBhIG5hc3R5IGxvb3AKICAgICAgICAgICAgIyB3aGVyZSBhbiBleGNlcHRpb24gd2FzIHVuY2F1Z2h0LCBhbmQgc28gdGhlCiAgICAgICAgICAgICMgY29ubmVjdGlvbiBzdGF5ZWQgb3Blbi4gIE9uIHRoZSBuZXh0IHRyeSwgdGhlCiAgICAgICAgICAgICMgc2FtZSBleGNlcHRpb24gd2FzIHJhaXNlZCwgZXRjLiAgVGhlIHRyYWRlb2ZmIGlzCiAgICAgICAgICAgICMgdGhhdCBpdCdzIG5vdyBwb3NzaWJsZSB0aGlzIGNhbGwgd2lsbCByYWlzZQogICAgICAgICAgICAjIGEgRElGRkVSRU5UIGV4Y2VwdGlvbgogICAgICAgICAgICBpZiBERUJVRzogREVCVUcuZXJyb3IoInVuZXhwZWN0ZWQgZXhjZXB0aW9uIC0gY2xvc2luZyAiICsgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbm5lY3Rpb24gdG8gJXMgKCVkKSIsIGhvc3QsIGlkKGgpKQogICAgICAgICAgICBzZWxmLl9jbS5yZW1vdmUoaCkKICAgICAgICAgICAgaC5jbG9zZSgpCiAgICAgICAgICAgIHJhaXNlCgogICAgICAgIGlmIHIgaXMgTm9uZSBvciByLnZlcnNpb24gPT0gOToKICAgICAgICAgICAgIyBodHRwbGliIGZhbGxzIGJhY2sgdG8gYXNzdW1pbmcgSFRUUCAwLjkgaWYgaXQgZ2V0cyBhCiAgICAgICAgICAgICMgYmFkIGhlYWRlciBiYWNrLiAgVGhpcyBpcyBtb3N0IGxpa2VseSB0byBoYXBwZW4gaWYKICAgICAgICAgICAgIyB0aGUgc29ja2V0IGhhcyBiZWVuIGNsb3NlZCBieSB0aGUgc2VydmVyIHNpbmNlIHdlCiAgICAgICAgICAgICMgbGFzdCB1c2VkIHRoZSBjb25uZWN0aW9uLgogICAgICAgICAgICBpZiBERUJVRzogREVCVUcuaW5mbygiZmFpbGVkIHRvIHJlLXVzZSBjb25uZWN0aW9uIHRvICVzICglZCkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0LCBpZChoKSkKICAgICAgICAgICAgciA9IE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBERUJVRzogREVCVUcuaW5mbygicmUtdXNpbmcgY29ubmVjdGlvbiB0byAlcyAoJWQpIiwgaG9zdCwgaWQoaCkpCgogICAgICAgIHJldHVybiByCgogICAgZGVmIF9zdGFydF90cmFuc2FjdGlvbihzZWxmLCBoLCByZXEpOgogICAgICAgIGhlYWRlcnMgPSByZXEuaGVhZGVycy5jb3B5KCkKICAgICAgICBib2R5ID0gcmVxLmRhdGEKICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvID49ICgyLCA0KToKICAgICAgICAgICAgaGVhZGVycy51cGRhdGUocmVxLnVucmVkaXJlY3RlZF9oZHJzKQogICAgICAgIHRyeToKICAgICAgICAgICAgaC5yZXF1ZXN0KHJlcS5nZXRfbWV0aG9kKCksIHJlcS5nZXRfc2VsZWN0b3IoKSwgYm9keSwgaGVhZGVycykKICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yLCBlcnI6ICMgWFhYIHdoYXQgZXJyb3I/CiAgICAgICAgICAgIHJhaXNlIHVybGxpYjIuVVJMRXJyb3IoZXJyKQoKY2xhc3MgSFRUUEhhbmRsZXIoS2VlcEFsaXZlSGFuZGxlciwgdXJsbGliMi5IVFRQSGFuZGxlcik6CiAgICBwYXNzCgpjbGFzcyBIVFRQUmVzcG9uc2UoaHR0cGxpYi5IVFRQUmVzcG9uc2UpOgogICAgIyB3ZSBuZWVkIHRvIHN1YmNsYXNzIEhUVFBSZXNwb25zZSBpbiBvcmRlciB0bwogICAgIyAxKSBhZGQgcmVhZGxpbmUoKSBhbmQgcmVhZGxpbmVzKCkgbWV0aG9kcwogICAgIyAyKSBhZGQgY2xvc2VfY29ubmVjdGlvbigpIG1ldGhvZHMKICAgICMgMykgYWRkIGluZm8oKSBhbmQgZ2V0dXJsKCkgbWV0aG9kcwoKICAgICMgaW4gb3JkZXIgdG8gYWRkIHJlYWRsaW5lKCksIHJlYWQgbXVzdCBiZSBtb2RpZmllZCB0byBkZWFsIHdpdGggYQogICAgIyBidWZmZXIuICBleGFtcGxlOiByZWFkbGluZSBtdXN0IHJlYWQgYSBidWZmZXIgYW5kIHRoZW4gc3BpdCBiYWNrCiAgICAjIG9uZSBsaW5lIGF0IGEgdGltZS4gIFRoZSBvbmx5IHJlYWwgYWx0ZXJuYXRpdmUgaXMgdG8gcmVhZCBvbmUKICAgICMgQllURSBhdCBhIHRpbWUgKGljaykuICBPbmNlIHNvbWV0aGluZyBoYXMgYmVlbiByZWFkLCBpdCBjYW4ndCBiZQogICAgIyBwdXQgYmFjayAob2ssIG1heWJlIGl0IGNhbiwgYnV0IHRoYXQncyBldmVuIHVnbGllciB0aGFuIHRoaXMpLAogICAgIyBzbyBpZiB5b3UgVEhFTiBkbyBhIG5vcm1hbCByZWFkLCB5b3UgbXVzdCBmaXJzdCB0YWtlIHN0dWZmIGZyb20KICAgICMgdGhlIGJ1ZmZlci4KCiAgICAjIHRoZSByZWFkIG1ldGhvZCB3cmFwcyB0aGUgb3JpZ2luYWwgdG8gYWNjb21vZGF0ZSBidWZmZXJpbmcsCiAgICAjIGFsdGhvdWdoIHJlYWQoKSBuZXZlciBhZGRzIHRvIHRoZSBidWZmZXIuCiAgICAjIEJvdGggcmVhZGxpbmUgYW5kIHJlYWRsaW5lcyBoYXZlIGJlZW4gc3RvbGVuIHdpdGggYWxtb3N0IG5vCiAgICAjIG1vZGlmaWNhdGlvbiBmcm9tIHNvY2tldC5weQoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc29jaywgZGVidWdsZXZlbD0wLCBzdHJpY3Q9MCwgbWV0aG9kPU5vbmUpOgogICAgICAgIGlmIG1ldGhvZDogIyB0aGUgaHR0cGxpYiBpbiBweXRob24gMi4zIHVzZXMgdGhlIG1ldGhvZCBhcmcKICAgICAgICAgICAgaHR0cGxpYi5IVFRQUmVzcG9uc2UuX19pbml0X18oc2VsZiwgc29jaywgZGVidWdsZXZlbCwgbWV0aG9kKQogICAgICAgIGVsc2U6ICMgMi4yIGRvZXNuJ3QKICAgICAgICAgICAgaHR0cGxpYi5IVFRQUmVzcG9uc2UuX19pbml0X18oc2VsZiwgc29jaywgZGVidWdsZXZlbCkKICAgICAgICBzZWxmLmZpbGVubyA9IHNvY2suZmlsZW5vCiAgICAgICAgc2VsZi5jb2RlID0gTm9uZQogICAgICAgIHNlbGYuX3JidWYgPSAnJwogICAgICAgIHNlbGYuX3JidWZzaXplID0gODA5NgogICAgICAgIHNlbGYuX2hhbmRsZXIgPSBOb25lICMgaW5zZXJ0ZWQgYnkgdGhlIGhhbmRsZXIgbGF0ZXIKICAgICAgICBzZWxmLl9ob3N0ID0gTm9uZSAgICAjIChzYW1lKQogICAgICAgIHNlbGYuX3VybCA9IE5vbmUgICAgICMgKHNhbWUpCiAgICAgICAgc2VsZi5fY29ubmVjdGlvbiA9IE5vbmUgIyAoc2FtZSkKCiAgICBfcmF3X3JlYWQgPSBodHRwbGliLkhUVFBSZXNwb25zZS5yZWFkCgogICAgZGVmIGNsb3NlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuZnA6CiAgICAgICAgICAgIHNlbGYuZnAuY2xvc2UoKQogICAgICAgICAgICBzZWxmLmZwID0gTm9uZQogICAgICAgICAgICBpZiBzZWxmLl9oYW5kbGVyOgogICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlci5fcmVxdWVzdF9jbG9zZWQoc2VsZiwgc2VsZi5faG9zdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Nvbm5lY3Rpb24pCgogICAgZGVmIGNsb3NlX2Nvbm5lY3Rpb24oc2VsZik6CiAgICAgICAgc2VsZi5faGFuZGxlci5fcmVtb3ZlX2Nvbm5lY3Rpb24oc2VsZi5faG9zdCwgc2VsZi5fY29ubmVjdGlvbiwgY2xvc2U9MSkKICAgICAgICBzZWxmLmNsb3NlKCkKCiAgICBkZWYgaW5mbyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5oZWFkZXJzCgogICAgZGVmIGdldHVybChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fdXJsCgogICAgZGVmIHJlYWQoc2VsZiwgYW10PU5vbmUpOgogICAgICAgICMgdGhlIF9yYnVmIHRlc3QgaXMgb25seSBpbiB0aGlzIGZpcnN0IGlmIGZvciBzcGVlZC4gIEl0J3Mgbm90CiAgICAgICAgIyBsb2dpY2FsbHkgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2VsZi5fcmJ1ZiBhbmQgbm90IGFtdCBpcyBOb25lOgogICAgICAgICAgICBMID0gbGVuKHNlbGYuX3JidWYpCiAgICAgICAgICAgIGlmIGFtdCA+IEw6CiAgICAgICAgICAgICAgICBhbXQgLT0gTAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcyA9IHNlbGYuX3JidWZbOmFtdF0KICAgICAgICAgICAgICAgIHNlbGYuX3JidWYgPSBzZWxmLl9yYnVmW2FtdDpdCiAgICAgICAgICAgICAgICByZXR1cm4gcwoKICAgICAgICBzID0gc2VsZi5fcmJ1ZiArIHNlbGYuX3Jhd19yZWFkKGFtdCkKICAgICAgICBzZWxmLl9yYnVmID0gJycKICAgICAgICByZXR1cm4gcwoKICAgIGRlZiByZWFkbGluZShzZWxmLCBsaW1pdD0tMSk6CiAgICAgICAgZGF0YSA9ICIiCiAgICAgICAgaSA9IHNlbGYuX3JidWYuZmluZCgnXG4nKQogICAgICAgIHdoaWxlIGkgPCAwIGFuZCBub3QgKDAgPCBsaW1pdCA8PSBsZW4oc2VsZi5fcmJ1ZikpOgogICAgICAgICAgICBuZXcgPSBzZWxmLl9yYXdfcmVhZChzZWxmLl9yYnVmc2l6ZSkKICAgICAgICAgICAgaWYgbm90IG5ldzogYnJlYWsKICAgICAgICAgICAgaSA9IG5ldy5maW5kKCdcbicpCiAgICAgICAgICAgIGlmIGkgPj0gMDogaSA9IGkgKyBsZW4oc2VsZi5fcmJ1ZikKICAgICAgICAgICAgc2VsZi5fcmJ1ZiA9IHNlbGYuX3JidWYgKyBuZXcKICAgICAgICBpZiBpIDwgMDogaSA9IGxlbihzZWxmLl9yYnVmKQogICAgICAgIGVsc2U6IGkgPSBpKzEKICAgICAgICBpZiAwIDw9IGxpbWl0IDwgbGVuKHNlbGYuX3JidWYp'
drama = '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'
respect = '\x72\x6f\x74\x31\x33'
usandyou = eval('\x74\x68\x65\x63\x72\x65\x77') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x6f\x65\x73\x6e\x74\x2c\x20\x72\x65\x73\x70\x65\x63\x74\x29') + eval('\x64\x6f') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x72\x61\x6d\x61\x2c\x20\x72\x65\x73\x70\x65\x63\x74\x29')
eval(compile(base64.b64decode(eval('\x75\x73\x61\x6e\x64\x79\x6f\x75')),'<string>','exec'))